/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import BLL.BLL_Student;
import BLL.DTO_Person;
import java.sql.JDBCType;
import static java.sql.JDBCType.NULL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class UI_Student extends javax.swing.JFrame {

    BLL_Student bllthongtinstudent = new BLL_Student();
    ArrayList<DTO_Person> arrayStudent = new ArrayList<DTO_Person>();
    private NonEditableTableModel tableModel_jTable1;

    public UI_Student() {
        initComponents();
        setLocationRelativeTo(null);
        loadStudent();
        loadData();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_timkien = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBox_item = new javax.swing.JComboBox<>();
        jButton_timkiem = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton_Sua = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton_refresh = new javax.swing.JButton();
        jButton_exit = new javax.swing.JButton();
        txtID = new javax.swing.JTextField();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton_insert = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_ThongtinSV = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jSpinner_Date = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("DANH SÁCH SINH VIÊN");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Tìm kiếm:");

        jTextField_timkien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_timkienActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Tìm theo:");

        jComboBox_item.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PersonID", "FirstName", "LastName" }));
        jComboBox_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_itemActionPerformed(evt);
            }
        });

        jButton_timkiem.setBackground(new java.awt.Color(0, 153, 51));
        jButton_timkiem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_timkiem.setForeground(new java.awt.Color(255, 255, 255));
        jButton_timkiem.setText("Tìm");
        jButton_timkiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_timkiemActionPerformed(evt);
            }
        });

        jLabel4.setText("StudentID");

        jButton_Sua.setBackground(new java.awt.Color(0, 51, 255));
        jButton_Sua.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_Sua.setForeground(new java.awt.Color(255, 255, 255));
        jButton_Sua.setText("Sửa");
        jButton_Sua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SuaActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Xóa");
        jButton1.setActionCommand("Deleted");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton_refresh.setBackground(new java.awt.Color(0, 204, 204));
        jButton_refresh.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_refresh.setForeground(new java.awt.Color(255, 255, 255));
        jButton_refresh.setText("Làm mới");
        jButton_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_refreshActionPerformed(evt);
            }
        });

        jButton_exit.setBackground(new java.awt.Color(0, 153, 204));
        jButton_exit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_exit.setForeground(new java.awt.Color(255, 255, 255));
        jButton_exit.setText("Thoát");
        jButton_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_exitActionPerformed(evt);
            }
        });

        txtID.setEditable(false);
        txtID.setEnabled(false);
        txtID.setMinimumSize(new java.awt.Dimension(64, 30));
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        txtFirstName.setMinimumSize(new java.awt.Dimension(64, 30));

        jLabel5.setText("FirstName");

        jLabel6.setText("LastName");

        jButton_insert.setBackground(new java.awt.Color(0, 153, 51));
        jButton_insert.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton_insert.setForeground(new java.awt.Color(255, 255, 255));
        jButton_insert.setText("Thêm");
        jButton_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_insertActionPerformed(evt);
            }
        });

        jTable_ThongtinSV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Student ID", "FirstName", "LastName", "HireDate", "Enrollment Date"
            }
        ));
        jScrollPane1.setViewportView(jTable_ThongtinSV);

        jLabel7.setText("EnrollmentDate");

        jSpinner_Date.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(), new java.util.Date(), java.util.Calendar.DAY_OF_WEEK_IN_MONTH));
        jSpinner_Date.setPreferredSize(new java.awt.Dimension(64, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTextField_timkien, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox_item, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jButton_timkiem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_exit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51)
                                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinner_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton_insert)
                        .addGap(29, 29, 29)
                        .addComponent(jButton_Sua)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_refresh)))
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(236, 236, 236))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_timkien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_item, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_timkiem, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_exit))
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jSpinner_Date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_insert)
                    .addComponent(jButton_Sua)
                    .addComponent(jButton1)
                    .addComponent(jButton_refresh))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField_timkienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_timkienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_timkienActionPerformed

    private void jButton_timkiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_timkiemActionPerformed
        try {
            if (jTextField_timkien.getText().trim().equals("")) {
                loadStudent();
                JOptionPane.showMessageDialog(this, "Vui lòng nhập thông tin");
            } else {
                String searchValue = jTextField_timkien.getText();
                String comboboxValue = jComboBox_item.getSelectedItem().toString();

                // Kiểm tra nếu trường ID là số nguyên
                if (comboboxValue.equals("PersonID")) {
                    try {
                        // Thử chuyển giá trị nhập từ người dùng thành số nguyên
                        int idValue = Integer.parseInt(searchValue);
                        // Gọi hàm tìm kiếm sinh viên theo ID từ BLL và hiển thị kết quả
                        System.out.println("123");
                        ArrayList<DTO_Person> students = bllthongtinstudent.searchStudentByID(idValue);
                        reloadStudent(students);

                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "ID phải là số nguyên");
                    }
                } else {
                    // Gọi hàm tìm kiếm sinh viên từ BLL với trường khác ID và hiển thị kết quả
                    ArrayList<DTO_Person> students = bllthongtinstudent.searchStudent(comboboxValue, searchValue);
                    reloadStudent(students);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy Sinh Viên");
        }
    }//GEN-LAST:event_jButton_timkiemActionPerformed
    private void loadData() {
        // Add a ListSelectionListener to the table
        jTable_ThongtinSV.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    displaySelectedRowData();
                }
            }
        });
    }

    private void displaySelectedRowData() {
        int selectedRowIndex = jTable_ThongtinSV.getSelectedRow();
        if (selectedRowIndex != -1) {
            DefaultTableModel model = (DefaultTableModel) jTable_ThongtinSV.getModel();
            txtID.setText(model.getValueAt(selectedRowIndex, 1).toString());
            txtFirstName.setText(model.getValueAt(selectedRowIndex, 2).toString());
            txtLastName.setText(model.getValueAt(selectedRowIndex, 3).toString());
            Date enrollmentDate = (Date) model.getValueAt(selectedRowIndex, 5);
            SpinnerDateModel dateModel = (SpinnerDateModel) jSpinner_Date.getModel();
            dateModel.setValue(enrollmentDate);
            //jSpinner_Date.setValue(enrollmentDate);
        }
    }
    private void jButton_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_exitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton_exitActionPerformed

    private void jComboBox_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_itemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_itemActionPerformed

    private void jButton_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_refreshActionPerformed
        txtID.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        refresh();
    }//GEN-LAST:event_jButton_refreshActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = jTable_ThongtinSV.getSelectedRow();
        if (selectedRow != -1) {
            
            int personID = (int) jTable_ThongtinSV.getValueAt(selectedRow, 1);
            int option = JOptionPane.showConfirmDialog(this, "Bạn có muốn xóa sinh viên này không?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                try {
                int result = bllthongtinstudent.deleteStudent(personID);
                if (result > 0) {
                    // Xóa thành công, cập nhật GUI hoặc hiển thị thông báo
                    JOptionPane.showMessageDialog(this, "Đã xóa thành công");
                    refresh();

                } else {
                    JOptionPane.showMessageDialog(this, "Xóa thất bại");
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                // Xử lý lỗi SQL
            }
            }
            } else {
                    // Người dùng chưa chọn sinh viên để xóa
                    JOptionPane.showMessageDialog(this, "Vui lòng chọn một sinh viên để xóa.");
                }
            
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private void jButton_insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_insertActionPerformed
        try {
            String firstName = txtFirstName.getText();
            String lastName = txtLastName.getText();
            Date enrollmentDate = (Date) jSpinner_Date.getValue();
            if (firstName.equals("") && lastName.equals("")) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin");
                return;
            }
//                    // Lấy ID của sinh viên từ dòng đã chọn trong bảng
//                    int selectedRow = jTable_ThongtinSV.getSelectedRow();
//
//                    int studentID = (int) jTable_ThongtinSV.getValueAt(selectedRow, 1);
//
//                    // Kiểm tra xem sinh viên có tồn tại hay không
            //int personID = Integer.parseInt(txtID.getText());
            if (txtID.getText().equals("") == false) {
                JOptionPane.showMessageDialog(this, "Sinh viên đã tồn tại trong cơ sở dữ liệu.");
                return;
            } else if(txtID.getText().equals("")) {
                DTO_Person new_student = new DTO_Person();
                new_student.setFirstName(firstName);
                new_student.setLastName(lastName);
                new_student.setHireDate(null);
                new_student.setEnrollmentDate(enrollmentDate);

                int result = bllthongtinstudent.insertStudent(new_student);

                if (result > 0) {
                    JOptionPane.showMessageDialog(this, "Thêm Thành Công");
                    refresh();
                } else {
                    JOptionPane.showMessageDialog(this, "Thêm Thất Bại");
                }
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi !!");
        }
    }//GEN-LAST:event_jButton_insertActionPerformed

    private void jButton_SuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SuaActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable_ThongtinSV.getSelectedRow();
        if (selectedRow != -1) {
            int personID = (int) jTable_ThongtinSV.getValueAt(selectedRow, 1);
            String firstName = txtFirstName.getText();
            String lastName = txtLastName.getText();

            DTO_Person editedStudent = new DTO_Person();
            editedStudent.setPersonID(personID);
            editedStudent.setFirstName(firstName);
            editedStudent.setLastName(lastName);

            try {
                int result = bllthongtinstudent.updateStudentName(editedStudent);
                if (result > 0) {
                    JOptionPane.showMessageDialog(this, "Sửa thành công.");
                    refresh();
                } else {
                    JOptionPane.showMessageDialog(this, "Sửa thất bại");
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                // Xử lý lỗi SQL
            }
        } else {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một sinh viên để sửa.");
        }
    }//GEN-LAST:event_jButton_SuaActionPerformed

    public void loadStudent() {
        arrayStudent = bllthongtinstudent.getAllStudent();
        DefaultTableModel model = (DefaultTableModel) jTable_ThongtinSV.getModel();
        for (int i = 0; i < arrayStudent.size(); i++) {
            DTO_Person person_DTO = arrayStudent.get(i);
            Object[] newrow = new Object[]{i + 1, person_DTO.getPersonID(), person_DTO.getFirstName(), person_DTO.getLastName(), person_DTO.getHireDate(), person_DTO.getEnrollmentDate()};
            model.addRow(newrow);
        }
    }

    public void refresh() {
        arrayStudent = bllthongtinstudent.getAllStudent();
        DefaultTableModel model = (DefaultTableModel) jTable_ThongtinSV.getModel();
        model.setRowCount(0); // Xóa dữ liệu hiện tại trên bảng
        for (int i = 0; i < arrayStudent.size(); i++) {
            DTO_Person person_DTO = arrayStudent.get(i);
            Object[] newrow = new Object[]{i + 1, person_DTO.getPersonID(), person_DTO.getFirstName(), person_DTO.getLastName(), person_DTO.getHireDate(), person_DTO.getEnrollmentDate()};
            model.addRow(newrow);
        }
    }

    public void reloadStudent(ArrayList<DTO_Person> list_Student) {
        DefaultTableModel model = (DefaultTableModel) jTable_ThongtinSV.getModel();
        model.setRowCount(0);
        for (int i = 0; i < list_Student.size(); i++) {
            DTO_Person person_DTO = list_Student.get(i);
            Object[] row = new Object[]{i + 1, person_DTO.getPersonID(), person_DTO.getFirstName(), person_DTO.getLastName(), person_DTO.getHireDate(), person_DTO.getEnrollmentDate()};
            model.addRow(row);
        }
    }
//    public void FindStudent(){
//        String selected_item = (String)jComboBox_item.getSelectedItem();
//        if(selected_item.trim().equals("PersonID")){
//            if(jTextField_timkien.getText().equals("")){
//                JOptionPane.showMessageDialog(this,"Không được để trống !");
//            }else {
//                ArrayList<Person_DTO> data = bllthongtinstudent.searchStudent(jTextField_timkien.getText().trim(),"ID");
//            }
//        }
//    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI_Student.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI_Student.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI_Student.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI_Student.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI_Student().setVisible(true);
            }
        });
    }

    public class NonEditableTableModel extends DefaultTableModel {

        public NonEditableTableModel(Object[][] data, Object[] columnNames) {
            super(data, columnNames);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // không cho phép sửa đổi các ô trong bảng
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_Sua;
    private javax.swing.JButton jButton_exit;
    private javax.swing.JButton jButton_insert;
    private javax.swing.JButton jButton_refresh;
    private javax.swing.JButton jButton_timkiem;
    private javax.swing.JComboBox<String> jComboBox_item;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_Date;
    private javax.swing.JTable jTable_ThongtinSV;
    private javax.swing.JTextField jTextField_timkien;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLastName;
    // End of variables declaration//GEN-END:variables
}
